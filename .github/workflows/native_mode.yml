name: Test Native Mode

on: [push]
# on:
#   schedule:
#     - cron: '0 0 * * *' # Run nightly at midnight
#   release:
#     types: [published] # Run when a release is published

jobs:
  run_script:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.7", "3.9", "3.11"]
        exclude: # macos seems to have issues with 3.7; skipping because it's not crucial
          - os: macos-latest
            python-version: "3.7"
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nicegui pyinstaller

      - name: Setup Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update 
          sudo apt-get install -y python3-pyqt5 python3-pyqt5.qtwebengine python3-pyqt5.qtwebchannel libqt5webkit5-dev
          sudo apt-get install -y libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-3.0 python3-gi python3-gi-cairo gir1.2-webkit2-4.0
          sudo apt-get install -y xvfb xdotool
          pip install pygobject qtpy pyside2
          Xvfb :99 -screen 0 1024x768x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Setup macOS dependencies
        if: runner.os == 'macOS'
        run: brew install xdotool

      - name: Run Script (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          export NO_AT_BRIDGE=1
          python test_native_mode.py &
          PID=$!
          sleep 200
          # if [ "${{ runner.os }}" == "macOS" ]; then
          #   osascript -e 'tell application (path to frontmost application as text) to close front window'
          # else
          #   WID=$(xdotool search --pid $PID | head -1)
          #   xdotool windowclose $WID
          # fi
          # wait $PID
          cat output.log
        shell: bash

      - name: Run Script (Windows)
        if: runner.os == 'Windows'
        run: |
          $process = Start-Process -FilePath "python" -ArgumentList "test_native_mode.py" -NoNewWindow -PassThru
          Start-Sleep -Seconds 200
          Get-Content output.log
          # $handle = (Get-Process -Id $process.Id).MainWindowHandle
          # Add-Type -AssemblyName System.Windows.Forms
          # [void] [System.Windows.Forms.Form]::FromHandle($handle).Close()
          # # Wait for the process to exit
          # $process.WaitForExit()
          # $exitCode = $process.ExitCode
          # if ($exitCode -eq 0) {
          #     Write-Host "Process exited successfully."
          # } else {
          #     Write-Host "Process exited with error code: $exitCode"
          #     exit $exitCode
          # }
        shell: pwsh

      - name: Check Roundtrip
        run: grep -q "Roundtrip works!" output.log

      - name: Cleanup (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          rm output.log
          pkill -f test_native_mode.py
        shell: bash

      - name: Cleanup (Windows)
        if: runner.os == 'Windows'
        run: |
          Remove-Item output.log
          Get-Process -Name "python", "python.exe", "python3.exe" -ErrorAction SilentlyContinue | Stop-Process -Force
        shell: pwsh

      - name: Test Frozen App (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          NICEGUI_PATH=$(python -c 'import nicegui; import os.path; print(os.path.dirname(nicegui.__file__))')
          pyinstaller --onefile --add-data "$NICEGUI_PATH:nicegui" --name myapp test_native_mode.py
          ./dist/myapp &
          sleep 200
          cat output.log
        shell: bash

      - name: Test Frozen App (Windows)
        if: runner.os == 'Windows'
        run: |
          $NICEGUI_PATH = $(python -c 'import nicegui; import os.path; print(os.path.dirname(nicegui.__file__))')
          $ITSDANGEROUS_PATH = $(python -c 'import itsdangerous; import os.path; print(os.path.dirname(itsdangerous.__file__))')
          python -m PyInstaller --onefile --add-data "$NICEGUI_PATH;'nicegui')" --add-data "$ITSDANGEROUS_PATH;'itsdangerous')" --name myapp main.py
          $executable_path = Join-Path -Path ".\dist" -ChildPath "myapp.exe"
          Start-Process -FilePath $executable_path -NoNewWindow
          Start-Sleep -Seconds 200
          Get-Content output.log
        shell: pwsh

      - name: Check Roundtrip
        run: grep -q "Roundtrip works!" output.log
